{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "61e5c15c-20ce-4819-9f2f-81c1790e5a50",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.stats import norm\n",
    "\n",
    "def d1d2(s,k,r,sigma,T):\n",
    "    \"\"\"\n",
    "    Help Notes:\n",
    "    \n",
    "    Function returns d1, d2 and requires the initial stock price (s), strike (k), risk free rate (r), implied Volatility (sigma), and the time to maturity (T)\n",
    "    \n",
    "    input is d1d2(s,k,r,sigma,T)\n",
    "    \n",
    "    \"\"\"\n",
    "    valid_inputs = False\n",
    "    arg_list = [s,k,r,sigma,T]\n",
    "    count = 0\n",
    "    for x in range(len(arg_list)): #checking for valid inputs\n",
    "        if type(arg_list[x]) == str:\n",
    "            count +=1\n",
    "        if count >= 1:\n",
    "            return \"parameters cannot be strings\"\n",
    "        \n",
    "    if sigma == 0 or T == 0:\n",
    "        \n",
    "        return \"sigma and T must be greater than zero\"\n",
    "        \n",
    "    if count == 0:\n",
    "        valid_inputs = True\n",
    "    \n",
    "    if valid_inputs == True: #if inputs are valid, d1 and d2 are executed\n",
    "        d1 = (np.log(s/k) + (r + ((sigma**2)/2))*T)/(sigma*np.sqrt(T))\n",
    "        d2 = d1 - sigma*np.sqrt(T)\n",
    "    \n",
    "        return d1, d2\n",
    "    \n",
    "    else: #otherwise user is notified of invalid input\n",
    "        \n",
    "        return \"invalid inputs. Either your values aren't numbers or T, sigma = 0\"\n",
    "def callprice(s,k,r, sigma, T):\n",
    "    \"\"\"\n",
    "    Help Notes:\n",
    "    \n",
    "    This function returns the call price and requires the initial stock price (s), strike (k), risk free rate (r), implied Volatility (sigma), and the time to maturity (T)\n",
    "    \n",
    "    input is callprice(s,k,r,sigma,T)\n",
    "    \"\"\"\n",
    "    try:\n",
    "        d1, d2 = d1d2(s,k,r,sigma,T)\n",
    "    \n",
    "        callprice = s*norm.cdf(d1) - k*np.exp(-r*T)*norm.cdf(d2)\n",
    "    \n",
    "        return callprice\n",
    "    except:\n",
    "        \n",
    "        return d1d2(s,k,r,sigma,T) #returns invalid input\n",
    "\n",
    "def putprice(s,k,r,sigma,T):\n",
    "    \"\"\" \n",
    "    Help Notes:\n",
    "    \n",
    "    This function returns the call price and requires the initial stock price (s), strike (k), risk free rate (r), implied Volatility (sigma), and the time to maturity (T)\n",
    "    \n",
    "    input is putprice(s,k,r,sigma,T)\n",
    "    \"\"\"\n",
    "    try:\n",
    "        d1, d2 = d1d2(s,k,r,sigma,T)\n",
    "\n",
    "        putprice = k*np.exp(-r*T)*norm.cdf(-d2) - s*norm.cdf(-d1)\n",
    "\n",
    "        return putprice\n",
    "    except:\n",
    "        \n",
    "        return d1d2(s,k,r,sigma,T) #returns invalid input\n",
    "        \n",
    "def calldelta(s,k,r,sigma,T):\n",
    "    \"\"\"\n",
    "    Help Notes:\n",
    "    \n",
    "    \n",
    "    Calculate the call delta and requires the initial stock price (s), strike (k), risk free rate (r), implied Volatility (sigma), and the time to maturity (T)\n",
    "    \n",
    "    input is calldelta(s,k,r,sigma,T)\n",
    "    \"\"\"\n",
    "    \n",
    "    try:\n",
    "        \n",
    "        calldelta = norm.cdf(d1d2(s,k,r,sigma,T)[0]) #if inputs are valid this executes otherwise the except tells them their inputs are wrong\n",
    "        return calldelta\n",
    "    \n",
    "    except:\n",
    "        \n",
    "        return d1d2(s,k,r,sigma,T)\n",
    "        \n",
    "def putdelta(s,k,r,sigma,T):\n",
    "    \"\"\"\n",
    "    Help Notes:\n",
    "    \n",
    "    Calculate the put delta and requires the initial stock price (s), strike (k), risk free rate (r), implied Volatility (sigma), and the time to maturity (T)\n",
    "    \n",
    "    input is putdelta(s,k,r,sigma,T)\n",
    "    \"\"\"\n",
    "    try:\n",
    "        \n",
    "        putdelta = norm.cdf(d1d2(s,k,r,sigma,T)[0]) - 1\n",
    "        return putdelta #if inputs are valid this will run. Otherwise the else command iterates.\n",
    "    except:\n",
    "        \n",
    "        return d1d2(s,k,r,sigma,T) #this will tell them they have invalid inputs.\n",
    "def gamma(s,k,r,sigma,T):\n",
    "    \"\"\"\n",
    "    Calculate gamma and requires the initial stock price (s), strike (k), risk free rate (r), implied Volatility (sigma), and the time to maturity (T)\n",
    "    \n",
    "    input is gamma(s,k,r,sigma,T)\n",
    "    \"\"\"\n",
    "    try:\n",
    "        \n",
    "        gamma = norm.pdf(d1d2(s,k,r,sigma,T)[0])/(s*sigma*np.sqrt(T)) #here we calculate gamma\n",
    "        return gamma\n",
    "    \n",
    "    except:\n",
    "        \n",
    "        return d1d2(s,k,r,sigma,T)  #returns that they have invalid inputs\n",
    "def vega(s,k,r,sigma,T):\n",
    "    \"\"\"\n",
    "    Calculate vega and requires the initial stock price (s), strike (k), risk free rate (r), implied Volatility (sigma), and the time to maturity (T)\n",
    "    \n",
    "    input is vega(s,k,r,sigma,T)\n",
    "    \"\"\"\n",
    "    try:\n",
    "        \n",
    "        vega = s*norm.pdf(d1d2(s,k,r,sigma,T)[0])*np.sqrt(T) #here we calculate vega. Similar to rest if this has invalid input it'll tell them in the exception\n",
    "        \n",
    "        return vega\n",
    "    \n",
    "    except:\n",
    "        \n",
    "        return d1d2(s,k,r,sigma,T)  #returns that they have invalid inputs\n",
    "    \n",
    "def calltheta(s,k,r,sigma,T):\n",
    "    \"\"\"\n",
    "    Calculate call theta and requires the initial stock price (s), strike (k), risk free rate (r), implied Volatility (sigma), and the time to maturity (T)\n",
    "    \n",
    "    input is calltheta(s,k,r,sigma,T)\n",
    "    \"\"\"\n",
    "    try:\n",
    "        \n",
    "        d1, d2 = d1d2(s,k,r,sigma,T)\n",
    "        call_theta = -1*((s*norm.pdf(d1)*sigma)/(2*np.sqrt(T)) + r*k*np.exp(-r*T)*norm.cdf(d2)) #equation from week 2 lecture, slide 47/64\n",
    "        return call_theta\n",
    "    \n",
    "    except:\n",
    "        \n",
    "        return d1d2(s,k,r,sigma,T)  #returns that they have invalid inputs\n",
    "    \n",
    "def puttheta(s,k,r,sigma,T):\n",
    "    \n",
    "    \"\"\"\n",
    "    Calculate put theta and requires the initial stock price (s), strike (k), risk free rate (r), implied Volatility (sigma), and the time to maturity (T)\n",
    "    \n",
    "    input is puttheta(s,k,r,sigma,T)\n",
    "    \"\"\"\n",
    "    try:\n",
    "        \n",
    "        d1, d2 = d1d2(s,k,r,sigma,T)\n",
    "        put_theta = -1*((s*norm.pdf(d1)*sigma)/(2*np.sqrt(T)) - r*k*np.exp(-r*T)*norm.cdf(-d2)) #equation from week 2 lecture, slide 47/64\n",
    "        return put_theta\n",
    "\n",
    "    except:\n",
    "        \n",
    "        return d1d2(s,k,r,sigma,T) #returns that they have invalid inputs\n",
    "    \n",
    "def callrho(s,k,r,sigma,T):\n",
    "    \n",
    "    \"\"\"\n",
    "    Calculate call rho and requires the initial stock price (s), strike (k), risk free rate (r), implied Volatility (sigma), and the time to maturity (T)\n",
    "    \n",
    "    input is callrho(s,k,r,sigma,T)\n",
    "    \"\"\"\n",
    "    try:\n",
    "        d2 = d1d2(s,k,r,sigma,T)[1]\n",
    "        call_rho = k*T*np.exp(-r*T)*norm.cdf(d2) #equation from week 2 lecture, slide 48/64\n",
    "        return call_rho\n",
    "    except:\n",
    "        \n",
    "        return d1d2(s,k,r,sigma,T) #returns that they have invalid inputs\n",
    "    \n",
    "def putrho(s,k,r,sigma,T):\n",
    "    \n",
    "    \"\"\"\n",
    "    Calculate put rho and requires the initial stock price (s), strike (k), risk free rate (r), implied Volatility (sigma), and the time to maturity (T)\n",
    "    \n",
    "    input is putrho(s,k,r,sigma,T)\n",
    "    \"\"\"\n",
    "    try:\n",
    "        d2 = d1d2(s,k,r,sigma,T)[1]\n",
    "        put_rho = -k*T*np.exp(-r*T)*norm.cdf(-d2) #equation from week 2 lecture, slide 48/64\n",
    "        return put_rho\n",
    "    except:\n",
    "        return d1d2(s,k,r,sigma,T) #returns that they have invalid inputs\n",
    "def testallfunc(s,k,r,sigma,T):\n",
    "    \"\"\"\n",
    "    For ease of the TA I've made a function that takes the same inputs for each function and runs it to make sure that each function is working as expected!\n",
    "    \n",
    "    The required inputs are: the initial stock price (s), strike (k), risk free rate (r), implied Volatility (sigma), and the time to maturity (T)\n",
    "    \n",
    "    input is testallfunc(s,k,r,sigma,T)\n",
    "    \"\"\"\n",
    "    print(\"callprice: \", callprice(s,k,r,sigma,T))\n",
    "    print(\"putprice: \", putprice(s,k,r,sigma,T))\n",
    "    print(\"calldelta: \", calldelta(s,k,r,sigma,T))\n",
    "    print(\"putdelta: \", putdelta(s,k,r,sigma,T))\n",
    "    print(\"gamma: \", gamma(s,k,r,sigma,T))\n",
    "    print(\"vega: \", vega(s,k,r,sigma,T))\n",
    "    print(\"calltheta: \", calltheta(s,k,r,sigma,T))\n",
    "    print(\"puttheta: \", puttheta(s,k,r,sigma,T))\n",
    "    print(\"callrho: \", callrho(s,k,r,sigma,T))\n",
    "    print(\"putrho: \", putrho(s,k,r,sigma,T))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a180a283-a292-4d77-8afe-09482a1b4296",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "callprice:  sigma and T must be greater than zero\n",
      "putprice:  sigma and T must be greater than zero\n",
      "calldelta:  sigma and T must be greater than zero\n",
      "putdelta:  sigma and T must be greater than zero\n",
      "gamma:  sigma and T must be greater than zero\n",
      "vega:  sigma and T must be greater than zero\n",
      "calltheta:  sigma and T must be greater than zero\n",
      "puttheta:  sigma and T must be greater than zero\n",
      "callrho:  sigma and T must be greater than zero\n",
      "putrho:  sigma and T must be greater than zero\n"
     ]
    }
   ],
   "source": [
    "testallfunc(1,2,2,0,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffb754cc-1d57-4e89-bd6f-bed18ab26d20",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
